[
    {
        "id": "916b9dbcf5ad3e00",
        "type": "tab",
        "label": "Initialize variables",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0b59576ee72e06d9",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "755838468578bf48",
        "type": "tab",
        "label": "Init sensors",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e08a334d8688ae84",
        "type": "mqtt-broker",
        "name": "",
        "broker": "${MQTT_BROKER}",
        "port": "${MQTT_BROKER_PORT}",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0e8f129c76ace03a",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "iot",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influx:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "fc03d7aeb9681b90",
        "type": "inject",
        "z": "916b9dbcf5ad3e00",
        "name": "Initialize Global Variable",
        "props": [
            {
                "p": "payload.roomKey",
                "v": "rooms",
                "vt": "str"
            },
            {
                "p": "payload.activateSensorTopic",
                "v": "sensors/activate",
                "vt": "str"
            },
            {
                "p": "payload.dataSensorTopic",
                "v": "sensors/data",
                "vt": "str"
            },
            {
                "p": "payload.actuatorsConsumptionTopic",
                "v": "actuators/consumption/#",
                "vt": "str"
            },
            {
                "p": "payload.broker",
                "v": "{\"broker\":\"localhost\",\"port\":1883,\"force\":true}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "ab94d42d03980f77"
            ]
        ]
    },
    {
        "id": "ab94d42d03980f77",
        "type": "change",
        "z": "916b9dbcf5ad3e00",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dataSensorTopic",
                "pt": "global",
                "to": "payload.dataSensorTopic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "actuatorsConsumptionTopic",
                "pt": "global",
                "to": "payload.actuatorsConsumptionTopic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "activateSensorTopic",
                "pt": "global",
                "to": "payload.activateSensorTopic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "427a379faa538488",
        "type": "inject",
        "z": "0b59576ee72e06d9",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "subscribe",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "$globalContext('dataSensorTopic') & \"/#\"\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 200,
        "wires": [
            [
                "faafa4fe85213fb1"
            ]
        ]
    },
    {
        "id": "fdcdddfab6cf8126",
        "type": "debug",
        "z": "0b59576ee72e06d9",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 140,
        "wires": []
    },
    {
        "id": "231de59f33547edf",
        "type": "function",
        "z": "0b59576ee72e06d9",
        "name": "Handle Sensor Data",
        "func": "function generateInfluxdbData({ type, room, id, value, measureUnit }) {\n    const payload = [\n        {\n            value: value,\n            measureUnit: measureUnit\n        },\n        {\n            room: room,\n            id: id,\n            type: type\n        },\n    ]\n    const measurement = type\n    return { payload, measurement }\n}\n\nconst { type, room, id, value, measureUnit } = msg.payload\nif (!type && !room && !id && !measureUnit) return\nif (value === undefined || value === null) return\nconst dataToWrite = generateInfluxdbData(msg.payload)\nmsg.payload = dataToWrite.payload\nmsg.measurement = dataToWrite.measurement\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 200,
        "wires": [
            [
                "fdcdddfab6cf8126",
                "14e34184220c393f"
            ]
        ]
    },
    {
        "id": "faafa4fe85213fb1",
        "type": "mqtt in",
        "z": "0b59576ee72e06d9",
        "name": "Sensor Data Topic",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 450,
        "y": 200,
        "wires": [
            [
                "75a22c9c959a2199",
                "231de59f33547edf"
            ]
        ]
    },
    {
        "id": "14e34184220c393f",
        "type": "influxdb out",
        "z": "0b59576ee72e06d9",
        "influxdb": "0e8f129c76ace03a",
        "name": "Write sensor data ",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "${DOCKER_INFLUXDB_INIT_ORG}",
        "bucket": "${DOCKER_INFLUXDB_INIT_BUCKET}",
        "x": 890,
        "y": 260,
        "wires": []
    },
    {
        "id": "75a22c9c959a2199",
        "type": "debug",
        "z": "0b59576ee72e06d9",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 320,
        "wires": []
    },
    {
        "id": "2291cab0656c8122",
        "type": "inject",
        "z": "0b59576ee72e06d9",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "subscribe",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "actuatorsConsumptionTopic",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "18ad96839c9c1188"
            ]
        ]
    },
    {
        "id": "18ad96839c9c1188",
        "type": "mqtt in",
        "z": "0b59576ee72e06d9",
        "name": "Actuator Data Topic",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 470,
        "y": 460,
        "wires": [
            [
                "b4bad796aec4dfa2"
            ]
        ]
    },
    {
        "id": "8aff8835891ee4bf",
        "type": "debug",
        "z": "0b59576ee72e06d9",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 400,
        "wires": []
    },
    {
        "id": "b4bad796aec4dfa2",
        "type": "function",
        "z": "0b59576ee72e06d9",
        "name": "Handle Actuator Data",
        "func": "const measurement = 'actuators'\nfunction generateInfluxdbData({ room, actuator, id, totalConsumption, consumptionPerSecond }) {\n    const payload = [\n        {\n            totalConsumption,\n            consumptionPerSecond\n        },\n        {\n            room,\n            actuator,\n            id\n        }\n    ]\n    return payload\n}\n\nconst sliceBy = global.get('actuatorsConsumptionTopic').replace('/#','').split(\"/\").length\nconst [actuator, room, id] = msg.topic.split('/').slice(sliceBy)\nconst {totalConsumption, consumptionPerSecond } = msg.payload\n\nconst payload = generateInfluxdbData({actuator, room, id, totalConsumption, consumptionPerSecond})\nmsg.payload = payload\nmsg.measurement = measurement\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "8aff8835891ee4bf",
                "a45715321ede61b7"
            ]
        ]
    },
    {
        "id": "a45715321ede61b7",
        "type": "influxdb out",
        "z": "0b59576ee72e06d9",
        "influxdb": "0e8f129c76ace03a",
        "name": "Write actuator consumption",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "${DOCKER_INFLUXDB_INIT_ORG}",
        "bucket": "${DOCKER_INFLUXDB_INIT_BUCKET}",
        "x": 980,
        "y": 460,
        "wires": []
    },
    {
        "id": "b5678455cca2a097",
        "type": "link in",
        "z": "755838468578bf48",
        "name": "Global Var Initialized",
        "links": [
            "c623a22e0f8f2072"
        ],
        "x": 205,
        "y": 440,
        "wires": [
            [
                "8324937fa4c6ae66",
                "aa892cc5faf41bc3"
            ]
        ]
    },
    {
        "id": "9b279c26c577b1c5",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Initialize sensors",
        "func": "const SENSOR_TYPES = global.get('sensorTypes')\nconst MEASURE_UNITS = global.get('measureUnits')\n\nclass Sensor {\n  constructor ({ type, room, id, value, measureUnit, randomProbability }) {\n    if (this.constructor === Sensor) {\n      throw new Error('Abstract class \"Sensor\" cannot be instantiated directly.')\n    }\n    this.type = type\n    this.room = room\n    this.id = id\n    this.value = value\n    this.measureUnit = measureUnit\n    this.randomProbability = randomProbability\n  }\n\n  getData () {\n    return {\n      type: this.type,\n      room: this.room,\n      id: this.id,\n      value: this.value,\n      measureUnit: this.measureUnit\n    }\n  }\n\n  generateData(){\n    throw new Error(\"Method not supported\")\n  }\n\n  updateValue ({ value }) {\n    throw new Error(\"Method not supported\")\n  }\n}\n\nclass LightSensor extends Sensor {\n  constructor ({ room, id, value = null, randomProbability = 50 }) {\n    const type = SENSOR_TYPES.LIGHT\n    const measureUnit = MEASURE_UNITS[type]\n    super({ type: SENSOR_TYPES.LIGHT, room, id, value, measureUnit, randomProbability })\n  }\n\n  updateValue({ value }) {\n    if (value === null || value === undefined) return\n    this.value = value\n  }\n\n  generateData(){\n    const by = 2\n    const probability = Math.random() * 100\n    if(probability > this.randomProbability) {\n      const shouldIncrease = (Math.random() * 100) >= 50\n      if(!shouldIncrease && this.value === 0) return 0\n      return shouldIncrease ? this.value + by : this.value - by\n    }\n    return this.value\n  }\n}\n\nclass MotionSensor extends Sensor {\n  constructor({ room, id, value = null, randomProbability = 40 }) {\n    const type = SENSOR_TYPES.LIGHT\n    const measureUnit = MEASURE_UNITS[type]\n    super({ type: SENSOR_TYPES.MOTION, room, id, value, measureUnit, randomProbability })\n  }\n\n  updateValue({ value }) {\n    if (value === null || value === undefined) return\n    this.value = value\n  }\n\n  generateData(){\n    const probability = Math.random() * 100\n    if(probability > this.randomProbability) {\n      return !this.value\n    }\n    return this.value\n  }\n}\n\nclass SensorFactory {\n  sensors = {\n    [SENSOR_TYPES.LIGHT]: LightSensor,\n    [SENSOR_TYPES.MOTION]: MotionSensor\n  }\n\n  create({type, room, id}) {\n    if (!this.sensors[type]) {\n      throw new Error(`Sensor type ${type} is not supported.`)\n    }\n    return new this.sensors[type]({ room, id })\n  }\n}\n\nconst sensorFactory = new SensorFactory()\n\nconst roomKey = global.get('roomKey')\nconst rooms = global.get(roomKey)\nconst activateTopic = global.get('activateSensorTopic')\n\nfor(const room of rooms) {\n    const {roomName, sensors} = room\n    let id = 0\n    for(const sensor of sensors){\n      const sens = sensorFactory.create({ type: sensor.type, room: roomName, id })\n      const key = `${roomName}/${sensor.type}/${sens.id}`\n      global.set(key, sens);\n      // Publish initialized data to the topic\n      // sensors/activate/<room>/<type>/<id>\n      msg.topic = `${activateTopic}/${roomName}/${sensor.type}/${id}`;\n      msg.payload = { sensor: sens, roomName};\n      id++\n      node.send(msg);\n    }\n}\nreturn",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "3003505d4d4b64f1",
                "485036f211773d50",
                "05d6ff2edfc3f55f"
            ]
        ]
    },
    {
        "id": "485036f211773d50",
        "type": "mqtt out",
        "z": "755838468578bf48",
        "name": "Activate Sensor",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e08a334d8688ae84",
        "x": 860,
        "y": 460,
        "wires": []
    },
    {
        "id": "3003505d4d4b64f1",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Generate Data Loop",
        "func": "const {sensor, roomName} = msg.payload\nconst dataSensorTopic = global.get(\"dataSensorTopic\")\nconst sensorKey = `${roomName}/${sensor.type}/${sensor.id}`\n// sensors/data/<room>/<type>/<id>\nconst topic = `${dataSensorTopic}/${sensorKey}`\nconst messageRate = 5000\nfunction sendData() {\n    const sensor = global.get(sensorKey)\n    const value = sensor.generateData()\n    sensor.updateValue( { value } )\n    const message = {topic, payload: sensor.getData()}\n    global.set(sensorKey, sensor)\n    node.send(message)\n}\n\nsetInterval(sendData, messageRate)\n// actuators/living-room/lightbulb/increase\nreturn",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 540,
        "wires": [
            [
                "7607e467ec6d66d9",
                "4940e7eadbc7c5e8"
            ]
        ]
    },
    {
        "id": "7607e467ec6d66d9",
        "type": "mqtt out",
        "z": "755838468578bf48",
        "name": "Send Sensor Data",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e08a334d8688ae84",
        "x": 1310,
        "y": 540,
        "wires": []
    },
    {
        "id": "05d6ff2edfc3f55f",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "Sensor initialized",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 600,
        "wires": []
    },
    {
        "id": "e8d394f860e18f1e",
        "type": "mqtt in",
        "z": "755838468578bf48",
        "name": "On Activate Sensor",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 690,
        "y": 260,
        "wires": [
            [
                "51c164ae9e832dc8"
            ]
        ]
    },
    {
        "id": "8324937fa4c6ae66",
        "type": "change",
        "z": "755838468578bf48",
        "name": "Set Activate Sensor Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext('activateSensorTopic') & \"/#\"\t",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "subscribe",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 260,
        "wires": [
            [
                "e8d394f860e18f1e"
            ]
        ]
    },
    {
        "id": "04733e6f9637ba22",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Handle Activate Sensor",
        "func": "const activateSensorTopic = global.get('activateSensorTopic')\nconst {sensorKeys} = msg.payload\nconst { topic, payload } = msg\n\n// sensor/activate/<room>/<type>/<id>\nconst sliceBy = activateSensorTopic.split(\"/\").length\nconst [room, sensorType, id] = topic.split(\"/\").slice(sliceBy)\nconst key = `${room}/${sensorType}/${id}`\nlet keys = global.get(sensorKeys) || []\nif(keys.includes(key)) return\nkeys.push(key)\n// Store the updated array back in the flow\nglobal.set(sensorKeys, keys)\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b851afacfddc5b9e",
        "type": "mqtt in",
        "z": "755838468578bf48",
        "name": "",
        "topic": "${ACTUATORS_TOPIC}",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 710,
        "y": 200,
        "wires": [
            [
                "51c164ae9e832dc8",
                "93e829cfaebfaae0"
            ]
        ]
    },
    {
        "id": "aa892cc5faf41bc3",
        "type": "delay",
        "z": "755838468578bf48",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 540,
        "wires": [
            [
                "9b279c26c577b1c5"
            ]
        ]
    },
    {
        "id": "242e532bcfb1021e",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Handle Actuator Message",
        "func": "const { topic, payload } = msg\nconst { sensorKeys } = msg.payload\nconst SENSOR_TYPES = global.get('sensorTypes')\n\nconst ACTUATORS_TYPES = {\n    LIGHTBULB: 'lightbulb'\n}\n\nconst ACTUATOR_MAP = {\n    [ACTUATORS_TYPES.LIGHTBULB]: SENSOR_TYPES.LIGHT,\n}\n\n// actuators/<room>/<type>/action\nconst actuatorsTopic = global.get('actuatorsTopic').replace(\"/#\", \"\").split(\"/\")\nconst [actuatorRoom, actuatorType, ] = topic.split(\"/\").slice(actuatorsTopic.length)\nconst keys = global.get(sensorKeys) || []\n// Find all keys that match the room and sensor type\nconst matchingKeys = keys.filter(k => {\n    // <room>/<type>/<id>\n    const [room, sensorType, ] = k.split(\"/\")\n    return room === actuatorRoom && ACTUATOR_MAP[actuatorType] === sensorType\n})\n\nif (matchingKeys.length === 0) {\n    node.warn(`Sensors for actuator ${actuatorType} in room ${actuatorRoom} not found`)\n    return\n}\nconst dataSensorTopic = global.get('dataSensorTopic')\nfor(const key of matchingKeys){\n    const sensor = global.get(key)\n    const [room, type, id] = key.split(\"/\")\n    if (!sensor) {\n        node.warn(`Sensor ${type} in ${room} not found`)\n        continue\n    }\n    const topic = `${dataSensorTopic}/${key}`\n    sensor.updateValue(payload)\n    const message = { topic, payload: sensor.getData() }\n    sensor.updateValue(payload)\n    global.set(key, sensor)\n    // node.warn(message)\n    node.send(message)\n}\n\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 280,
        "wires": [
            [
                "cece027a2f052c5c",
                "7607e467ec6d66d9"
            ]
        ]
    },
    {
        "id": "51c164ae9e832dc8",
        "type": "change",
        "z": "755838468578bf48",
        "name": "Set Sensor Key",
        "rules": [
            {
                "t": "set",
                "p": "payload.sensorKeys",
                "pt": "msg",
                "to": "sensorKeys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "7f1daae40058183d"
            ]
        ]
    },
    {
        "id": "7f1daae40058183d",
        "type": "switch",
        "z": "755838468578bf48",
        "name": "Check Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "activateSensorTopic",
                "vt": "global"
            },
            {
                "t": "cont",
                "v": "$replace($globalContext('actuatorsTopic'), '/#', '', 1)\t\t",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "04733e6f9637ba22"
            ],
            [
                "242e532bcfb1021e"
            ]
        ]
    },
    {
        "id": "cece027a2f052c5c",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "Sensors responds to actuators",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 280,
        "wires": []
    },
    {
        "id": "4940e7eadbc7c5e8",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 600,
        "wires": []
    },
    {
        "id": "93e829cfaebfaae0",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 140,
        "wires": []
    }
]