[
    {
        "id": "916b9dbcf5ad3e00",
        "type": "tab",
        "label": "Initialize variables",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0b59576ee72e06d9",
        "type": "tab",
        "label": "Write to influxdb",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ab70fa0b96a9bdd3",
        "type": "tab",
        "label": "Home",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6127eaeadf941c69",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "41f8c2b710ddca0a",
        "type": "tab",
        "label": "Room selector",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cc4603ebcf2608d1",
        "type": "tab",
        "label": "Rooms",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "755838468578bf48",
        "type": "tab",
        "label": "Init sensors",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "bf43cffc3a2be301",
        "type": "group",
        "z": "6127eaeadf941c69",
        "name": "Settings",
        "style": {
            "label": true,
            "stroke": "#6f2fa0"
        },
        "nodes": [
            "a47911ec1ade51f0",
            "20876a078e0d7fc3",
            "667f4aad66d2a33d",
            "3f5a1c14adbc6a6f",
            "62a6550bfdeb9374",
            "c9230acd5c3e340c",
            "922d53c2f349b642",
            "8c3e84dc8ef824bb",
            "ced9bbc8682f193f",
            "04d539de55b04d2b",
            "1b43734addaf2068",
            "20679cdba0d2340d",
            "d249db5d41f1a689",
            "0e05b2c94ecf1fcb",
            "9a195ae6cbba0146",
            "a989fc750982ec19",
            "eec7c8eaf3e4a887",
            "139105f6a651c339",
            "c78a541774da3274",
            "de3e1bb4379ac437"
        ],
        "x": 54,
        "y": 219,
        "w": 1412,
        "h": 402
    },
    {
        "id": "9cd83b71e925ce2c",
        "type": "group",
        "z": "41f8c2b710ddca0a",
        "name": "Select room",
        "style": {
            "label": true
        },
        "nodes": [
            "a3a996ed79502ea4",
            "a6cc92e90d1bed09",
            "467c1c21e8a027ac",
            "3bdf07b8ddea81d1",
            "9ff94f56f58b8351",
            "0e0189a340ec3144",
            "71eff3b7c67cf372",
            "adb2af0461604686",
            "b656fce925a04029",
            "7b63df752c36ba6f",
            "9a7c0ce63d4c336f",
            "ef543c086902d527",
            "64cb8d94f3d6dca7",
            "341c79926f0ed1e4",
            "acfdbcdab7132255"
        ],
        "x": 54,
        "y": 199,
        "w": 1322,
        "h": 222
    },
    {
        "id": "52d1425e510d0bee",
        "type": "group",
        "z": "ab70fa0b96a9bdd3",
        "name": "Total Consumption",
        "style": {
            "label": true,
            "stroke": "#92d04f"
        },
        "nodes": [
            "93c41afcb4ac3710",
            "bb87bea795c40718",
            "cc328b61b262a0b0",
            "c3b337e32961dbc4",
            "149af53453b77c06",
            "5dbb02e63ab881ed"
        ],
        "x": 34,
        "y": 119,
        "w": 1092,
        "h": 162
    },
    {
        "id": "443f62182e0eaacd",
        "type": "group",
        "z": "ab70fa0b96a9bdd3",
        "name": "Current Consumption",
        "style": {
            "label": true,
            "stroke": "#92d04f"
        },
        "nodes": [
            "0a5d8812c21d5bfd",
            "d4bc9e406791255a",
            "db34839e24fa534c",
            "9fd1e1bd0383a7d7",
            "575faf7714bcc57d",
            "b2edd8ef35f797e4"
        ],
        "x": 34,
        "y": 319,
        "w": 1052,
        "h": 162
    },
    {
        "id": "e08a334d8688ae84",
        "type": "mqtt-broker",
        "name": "",
        "broker": "${MQTT_BROKER}",
        "port": "${MQTT_BROKER_PORT}",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0e8f129c76ace03a",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "iot",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influx:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "c1dbac1a29cb8513",
        "type": "ui_tab",
        "name": "Home",
        "icon": "fa-lightbulb-o",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "af0b1d9cea7d5bd4",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3f8c48cfaa40525a",
        "type": "ui_group",
        "name": "Settings",
        "tab": "c1dbac1a29cb8513",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ff724d16a36f0fe7",
        "type": "ui_tab",
        "name": "Rooms",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ca7de9296fb2277a",
        "type": "ui_group",
        "name": "Graphics",
        "tab": "ff724d16a36f0fe7",
        "order": 2,
        "disp": false,
        "width": "34",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3bba53499f695836",
        "type": "ui_group",
        "name": "Total Consumption",
        "tab": "c1dbac1a29cb8513",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a912e959f4cc6ec9",
        "type": "ui_group",
        "name": "Current Consumption",
        "tab": "c1dbac1a29cb8513",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0ad1771c70dc1d60",
        "type": "ui_tab",
        "name": "Home statistics",
        "icon": "home",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "88bdb19be1806be2",
        "type": "ui_group",
        "name": "Select room",
        "tab": "0ad1771c70dc1d60",
        "order": 1,
        "disp": true,
        "width": "34",
        "collapse": false,
        "className": ""
    },
    {
        "id": "57b54151f5295e42",
        "type": "ui_spacer",
        "z": "41f8c2b710ddca0a",
        "name": "spacer",
        "group": "88bdb19be1806be2",
        "order": 3,
        "width": 22,
        "height": 1
    },
    {
        "id": "fc03d7aeb9681b90",
        "type": "inject",
        "z": "916b9dbcf5ad3e00",
        "name": "Initialize Global Variable",
        "props": [
            {
                "p": "payload.roomKey",
                "v": "rooms",
                "vt": "str"
            },
            {
                "p": "payload.activateSensorTopic",
                "v": "sensors/activate",
                "vt": "str"
            },
            {
                "p": "payload.dataSensorTopic",
                "v": "sensors/data",
                "vt": "str"
            },
            {
                "p": "payload.actuatorsConsumptionTopic",
                "v": "actuators/consumption/#",
                "vt": "str"
            },
            {
                "p": "payload.broker",
                "v": "{\"broker\":\"localhost\",\"port\":1883,\"force\":true}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "ab94d42d03980f77"
            ]
        ]
    },
    {
        "id": "ab94d42d03980f77",
        "type": "change",
        "z": "916b9dbcf5ad3e00",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dataSensorTopic",
                "pt": "global",
                "to": "payload.dataSensorTopic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "actuatorsConsumptionTopic",
                "pt": "global",
                "to": "payload.actuatorsConsumptionTopic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "activateSensorTopic",
                "pt": "global",
                "to": "payload.activateSensorTopic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "grafanaUrl",
                "pt": "global",
                "to": "$env(\"SERVER_URL\") & \":\" & $env(\"SERVER_PORT\") & \"/user-preferences\"\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "427a379faa538488",
        "type": "inject",
        "z": "0b59576ee72e06d9",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "subscribe",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "$globalContext('dataSensorTopic') & \"/#\"\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 200,
        "wires": [
            [
                "faafa4fe85213fb1"
            ]
        ]
    },
    {
        "id": "fdcdddfab6cf8126",
        "type": "debug",
        "z": "0b59576ee72e06d9",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 140,
        "wires": []
    },
    {
        "id": "231de59f33547edf",
        "type": "function",
        "z": "0b59576ee72e06d9",
        "name": "Handle Sensor Data",
        "func": "function generateInfluxdbData({ type, room, id, value, measureUnit }) {\n    const payload = [\n        {\n            value: value,\n            measureUnit: measureUnit\n        },\n        {\n            room: room,\n            id: id,\n            type: type\n        },\n    ]\n    const measurement = type\n    return { payload, measurement }\n}\n\nconst { type, room, id, value, measureUnit } = msg.payload\nif (!type && !room && !id && !measureUnit) return\nif (value === undefined || value === null) return\nconst dataToWrite = generateInfluxdbData(msg.payload)\nmsg.payload = dataToWrite.payload\nmsg.measurement = dataToWrite.measurement\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 200,
        "wires": [
            [
                "fdcdddfab6cf8126",
                "14e34184220c393f"
            ]
        ]
    },
    {
        "id": "faafa4fe85213fb1",
        "type": "mqtt in",
        "z": "0b59576ee72e06d9",
        "name": "Sensor Data Topic",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 450,
        "y": 200,
        "wires": [
            [
                "75a22c9c959a2199",
                "231de59f33547edf"
            ]
        ]
    },
    {
        "id": "14e34184220c393f",
        "type": "influxdb out",
        "z": "0b59576ee72e06d9",
        "influxdb": "0e8f129c76ace03a",
        "name": "Write sensor data ",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "${DOCKER_INFLUXDB_INIT_ORG}",
        "bucket": "${DOCKER_INFLUXDB_INIT_BUCKET}",
        "x": 890,
        "y": 260,
        "wires": []
    },
    {
        "id": "75a22c9c959a2199",
        "type": "debug",
        "z": "0b59576ee72e06d9",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 320,
        "wires": []
    },
    {
        "id": "2291cab0656c8122",
        "type": "inject",
        "z": "0b59576ee72e06d9",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "subscribe",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "actuatorsConsumptionTopic",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "18ad96839c9c1188"
            ]
        ]
    },
    {
        "id": "18ad96839c9c1188",
        "type": "mqtt in",
        "z": "0b59576ee72e06d9",
        "name": "Actuator Data Topic",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 470,
        "y": 460,
        "wires": [
            [
                "b4bad796aec4dfa2"
            ]
        ]
    },
    {
        "id": "8aff8835891ee4bf",
        "type": "debug",
        "z": "0b59576ee72e06d9",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 400,
        "wires": []
    },
    {
        "id": "b4bad796aec4dfa2",
        "type": "function",
        "z": "0b59576ee72e06d9",
        "name": "Handle Actuator Data",
        "func": "const measurement = 'actuators'\nfunction generateInfluxdbData({ room, actuator, id, totalConsumption, consumptionPerSecond, currentLux }) {\n    const payload = [\n        {\n            totalConsumption,\n            consumptionPerSecond,\n            currentLux\n        },\n        {\n            room,\n            type: actuator,\n            id\n        }\n    ]\n    return payload\n}\n\nconst sliceBy = global.get('actuatorsConsumptionTopic').replace('/#','').split(\"/\").length\nconst [room, actuator, id] = msg.topic.split('/').slice(sliceBy)\n\nconst payload = generateInfluxdbData({actuator, room, id, ...msg.payload})\nmsg.payload = payload\nmsg.measurement = measurement\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "8aff8835891ee4bf",
                "a45715321ede61b7"
            ]
        ]
    },
    {
        "id": "a45715321ede61b7",
        "type": "influxdb out",
        "z": "0b59576ee72e06d9",
        "influxdb": "0e8f129c76ace03a",
        "name": "Write actuator consumption",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "${DOCKER_INFLUXDB_INIT_ORG}",
        "bucket": "${DOCKER_INFLUXDB_INIT_BUCKET}",
        "x": 980,
        "y": 460,
        "wires": []
    },
    {
        "id": "93c41afcb4ac3710",
        "type": "influxdb in",
        "z": "ab70fa0b96a9bdd3",
        "g": "52d1425e510d0bee",
        "influxdb": "0e8f129c76ace03a",
        "name": "Total Consumption last 30 days",
        "query": "from(bucket: \"iot\")\n  |> range(start: -30d)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"actuators\")\n  |> filter(fn: (r) => r[\"_field\"] == \"totalConsumption\")\n  |> group(columns: [\"_field\"], mode:\"by\")\n  |> sum()\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "univaq",
        "x": 450,
        "y": 220,
        "wires": [
            [
                "5dbb02e63ab881ed"
            ]
        ]
    },
    {
        "id": "bb87bea795c40718",
        "type": "inject",
        "z": "ab70fa0b96a9bdd3",
        "g": "52d1425e510d0bee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "93c41afcb4ac3710"
            ]
        ]
    },
    {
        "id": "cc328b61b262a0b0",
        "type": "debug",
        "z": "ab70fa0b96a9bdd3",
        "g": "52d1425e510d0bee",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 180,
        "wires": []
    },
    {
        "id": "c3b337e32961dbc4",
        "type": "ui_text",
        "z": "ab70fa0b96a9bdd3",
        "g": "52d1425e510d0bee",
        "group": "3bba53499f695836",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Total Consumption (last 30 days)",
        "format": "{{msg.payload / 1000 | number:3}} kW",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 240,
        "wires": []
    },
    {
        "id": "149af53453b77c06",
        "type": "ui_button",
        "z": "ab70fa0b96a9bdd3",
        "g": "52d1425e510d0bee",
        "name": "",
        "group": "3bba53499f695836",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "93c41afcb4ac3710"
            ]
        ]
    },
    {
        "id": "5dbb02e63ab881ed",
        "type": "function",
        "z": "ab70fa0b96a9bdd3",
        "g": "52d1425e510d0bee",
        "name": "function 5",
        "func": "let value = 0\nconst [result] = msg.payload\nif (result) value = result._value\nmsg.payload = value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 220,
        "wires": [
            [
                "cc328b61b262a0b0",
                "c3b337e32961dbc4"
            ]
        ]
    },
    {
        "id": "0a5d8812c21d5bfd",
        "type": "ui_button",
        "z": "ab70fa0b96a9bdd3",
        "g": "443f62182e0eaacd",
        "name": "",
        "group": "a912e959f4cc6ec9",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "d4bc9e406791255a"
            ]
        ]
    },
    {
        "id": "d4bc9e406791255a",
        "type": "influxdb in",
        "z": "ab70fa0b96a9bdd3",
        "g": "443f62182e0eaacd",
        "influxdb": "0e8f129c76ace03a",
        "name": "Total Consumption last 30 days",
        "query": "from(bucket: \"iot\")\n  |> range(start: -5s)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"actuators\")\n  |> filter(fn: (r) => r[\"_field\"] == \"consumptionPerSecond\")\n  |> group(columns: [\"_field\"], mode:\"by\")\n  |> sum()\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "univaq",
        "x": 450,
        "y": 420,
        "wires": [
            [
                "b2edd8ef35f797e4"
            ]
        ]
    },
    {
        "id": "db34839e24fa534c",
        "type": "inject",
        "z": "ab70fa0b96a9bdd3",
        "g": "443f62182e0eaacd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "d4bc9e406791255a"
            ]
        ]
    },
    {
        "id": "9fd1e1bd0383a7d7",
        "type": "debug",
        "z": "ab70fa0b96a9bdd3",
        "g": "443f62182e0eaacd",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 380,
        "wires": []
    },
    {
        "id": "575faf7714bcc57d",
        "type": "ui_text",
        "z": "ab70fa0b96a9bdd3",
        "g": "443f62182e0eaacd",
        "group": "a912e959f4cc6ec9",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Current Consumption",
        "format": "{{(msg.payload >= 0 ? msg.payload : 0 )| number:3}} Wh",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 960,
        "y": 440,
        "wires": []
    },
    {
        "id": "b2edd8ef35f797e4",
        "type": "function",
        "z": "ab70fa0b96a9bdd3",
        "g": "443f62182e0eaacd",
        "name": "function 4",
        "func": "let value = 0\nconst [result] = msg.payload\nif(result) value = result._value\nmsg.payload = value\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 420,
        "wires": [
            [
                "575faf7714bcc57d",
                "9fd1e1bd0383a7d7"
            ]
        ]
    },
    {
        "id": "a47911ec1ade51f0",
        "type": "http request",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "Get User Preferences",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 260,
        "wires": [
            [
                "9a195ae6cbba0146"
            ]
        ]
    },
    {
        "id": "20876a078e0d7fc3",
        "type": "inject",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "props": [
            {
                "p": "url",
                "v": "$env(\"SERVER_URL\") & \":\" & $env(\"SERVER_PORT\") & \"/user-preferences\"\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "de3e1bb4379ac437"
            ]
        ]
    },
    {
        "id": "667f4aad66d2a33d",
        "type": "http request",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "Update User Preferences",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 520,
        "wires": [
            [
                "1b43734addaf2068"
            ]
        ]
    },
    {
        "id": "3f5a1c14adbc6a6f",
        "type": "ui_toast",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1350,
        "y": 440,
        "wires": []
    },
    {
        "id": "62a6550bfdeb9374",
        "type": "split",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 890,
        "y": 440,
        "wires": [
            [
                "922d53c2f349b642"
            ]
        ]
    },
    {
        "id": "c9230acd5c3e340c",
        "type": "change",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.error",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 440,
        "wires": [
            [
                "62a6550bfdeb9374"
            ]
        ]
    },
    {
        "id": "922d53c2f349b642",
        "type": "change",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.message",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 440,
        "wires": [
            [
                "8c3e84dc8ef824bb"
            ]
        ]
    },
    {
        "id": "8c3e84dc8ef824bb",
        "type": "join",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "<br>",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1190,
        "y": 440,
        "wires": [
            [
                "3f5a1c14adbc6a6f"
            ]
        ]
    },
    {
        "id": "ced9bbc8682f193f",
        "type": "link in",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "link in 1",
        "links": [
            "04d539de55b04d2b"
        ],
        "x": 105,
        "y": 520,
        "wires": [
            [
                "667f4aad66d2a33d"
            ]
        ]
    },
    {
        "id": "04d539de55b04d2b",
        "type": "link out",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "ced9bbc8682f193f"
        ],
        "x": 1065,
        "y": 260,
        "wires": []
    },
    {
        "id": "1b43734addaf2068",
        "type": "switch",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 520,
        "wires": [
            [
                "c9230acd5c3e340c",
                "0e05b2c94ecf1fcb"
            ],
            [
                "d249db5d41f1a689",
                "c78a541774da3274"
            ]
        ]
    },
    {
        "id": "20679cdba0d2340d",
        "type": "ui_toast",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "position": "bottom right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1030,
        "y": 520,
        "wires": []
    },
    {
        "id": "d249db5d41f1a689",
        "type": "change",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Settings updated successfuly!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 520,
        "wires": [
            [
                "20679cdba0d2340d"
            ]
        ]
    },
    {
        "id": "0e05b2c94ecf1fcb",
        "type": "change",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "$env(\"SERVER_URL\") & \":\" & $env(\"SERVER_PORT\") & \"/user-preferences\"\t",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 420,
        "wires": [
            [
                "a47911ec1ade51f0"
            ]
        ]
    },
    {
        "id": "9a195ae6cbba0146",
        "type": "ui_form",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "label": "",
        "group": "3f8c48cfaa40525a",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Lights Enabled",
                "value": "lightsEnabled",
                "type": "switch",
                "required": true,
                "rows": null
            },
            {
                "label": "Minimum Light Intensity Threshold",
                "value": "minimumLightIntensityThreshold",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Maximum Light Intensity Threshold",
                "value": "maximumLightIntensityThreshold",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "lightsEnabled": false,
            "minimumLightIntensityThreshold": "",
            "maximumLightIntensityThreshold": ""
        },
        "payload": "",
        "submit": "Update",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 750,
        "y": 260,
        "wires": [
            [
                "a989fc750982ec19"
            ]
        ]
    },
    {
        "id": "a989fc750982ec19",
        "type": "change",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "$env(\"SERVER_URL\") & \":\" & $env(\"SERVER_PORT\") & \"/user-preferences\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 260,
        "wires": [
            [
                "04d539de55b04d2b"
            ]
        ]
    },
    {
        "id": "eec7c8eaf3e4a887",
        "type": "link out",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "139105f6a651c339"
        ],
        "x": 945,
        "y": 580,
        "wires": []
    },
    {
        "id": "139105f6a651c339",
        "type": "link in",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "link in 2",
        "links": [
            "eec7c8eaf3e4a887"
        ],
        "x": 955,
        "y": 340,
        "wires": [
            [
                "9a195ae6cbba0146"
            ]
        ]
    },
    {
        "id": "c78a541774da3274",
        "type": "change",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.userPreferences",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 580,
        "wires": [
            [
                "eec7c8eaf3e4a887"
            ]
        ]
    },
    {
        "id": "de3e1bb4379ac437",
        "type": "delay",
        "z": "6127eaeadf941c69",
        "g": "bf43cffc3a2be301",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 260,
        "wires": [
            [
                "a47911ec1ade51f0"
            ]
        ]
    },
    {
        "id": "a3a996ed79502ea4",
        "type": "http request",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "467c1c21e8a027ac"
            ]
        ]
    },
    {
        "id": "a6cc92e90d1bed09",
        "type": "inject",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "",
        "props": [
            {
                "p": "url",
                "v": "$replace($env(\"GF_SERVER_ROOT_URL\"), \"http://\", \"\") & \":\" & $env(\"GRAFANA_SERVER_PORT\") & \"/api/search\"\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "acfdbcdab7132255"
            ]
        ]
    },
    {
        "id": "467c1c21e8a027ac",
        "type": "function",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "function 6",
        "func": "const response = msg.payload\nconst dashboards = response.map(data => data.uid)\nmsg.payload = msg.options = dashboards\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 300,
        "wires": [
            [
                "3bdf07b8ddea81d1"
            ]
        ]
    },
    {
        "id": "3bdf07b8ddea81d1",
        "type": "ui_dropdown",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select room",
        "group": "88bdb19be1806be2",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 860,
        "y": 300,
        "wires": [
            [
                "9ff94f56f58b8351"
            ]
        ]
    },
    {
        "id": "9ff94f56f58b8351",
        "type": "function",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "function 7",
        "func": "const dashboard = msg.payload\nflow.set('selectedDashboard', dashboard)\nconst url = `grafana:3000/api/dashboards/uid/${dashboard}`\nmsg.url = url\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 300,
        "wires": [
            [
                "0e0189a340ec3144"
            ]
        ]
    },
    {
        "id": "0e0189a340ec3144",
        "type": "http request",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 300,
        "wires": [
            [
                "b656fce925a04029"
            ]
        ]
    },
    {
        "id": "71eff3b7c67cf372",
        "type": "link in",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "link in 3",
        "links": [
            "b656fce925a04029"
        ],
        "x": 175,
        "y": 380,
        "wires": [
            [
                "adb2af0461604686"
            ]
        ]
    },
    {
        "id": "adb2af0461604686",
        "type": "function",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "function 8",
        "func": "const response = msg.payload\nconst orgId = 1\nconst iframeUrls = []\nconst { dashboard } = response\nlet id = 1\nfor (const panel of dashboard.panels) {\n    const iframeUrl = `http://localhost:3000/d-solo/${dashboard.uid}/${dashboard.title}?orgId=${orgId}&panelId=${id}`;\n    iframeUrls.push(iframeUrl)\n    id++\n}\nmsg.payload = iframeUrls\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 380,
        "wires": [
            [
                "ef543c086902d527"
            ]
        ]
    },
    {
        "id": "b656fce925a04029",
        "type": "link out",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "71eff3b7c67cf372"
        ],
        "x": 1335,
        "y": 300,
        "wires": []
    },
    {
        "id": "7b63df752c36ba6f",
        "type": "ui_template",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "group": "88bdb19be1806be2",
        "name": "",
        "order": 4,
        "width": "27",
        "height": "8",
        "format": "<div id=\"content\">\n  {{msg.payload}}\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 780,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "9a7c0ce63d4c336f",
        "type": "template",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "",
        "output": "str",
        "x": 620,
        "y": 380,
        "wires": [
            [
                "7b63df752c36ba6f"
            ]
        ]
    },
    {
        "id": "ef543c086902d527",
        "type": "function",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "function 9",
        "func": "function createIframe(url){\n    return `<iframe style='flex: 1 0 31%' height=\"400\" frameborder=\"0\" src=\"${url}\"></iframe>`\n}\n\nlet urls = msg.payload\nmsg.template = urls.reduce((prev, curr) => prev + createIframe(curr), '<div style=\"display:flex; flex-direction:row; flex-wrap:wrap; gap:2px 3px; justify-content: space-between\">')\nmsg.template = msg.template + \"</div>\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 380,
        "wires": [
            [
                "9a7c0ce63d4c336f"
            ]
        ]
    },
    {
        "id": "64cb8d94f3d6dca7",
        "type": "ui_button",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "",
        "group": "88bdb19be1806be2",
        "order": 2,
        "width": "4",
        "height": 1,
        "passthru": false,
        "label": "Refresh rooms",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "selectedDashboard",
        "payloadType": "flow",
        "topic": "payload",
        "topicType": "msg",
        "x": 260,
        "y": 240,
        "wires": [
            [
                "341c79926f0ed1e4"
            ]
        ]
    },
    {
        "id": "341c79926f0ed1e4",
        "type": "change",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "$replace($env(\"GF_SERVER_ROOT_URL\"), \"http://\", \"\") & \":\" & $env(\"GRAFANA_SERVER_PORT\") & \"/api/search\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 240,
        "wires": [
            [
                "a3a996ed79502ea4"
            ]
        ]
    },
    {
        "id": "acfdbcdab7132255",
        "type": "delay",
        "z": "41f8c2b710ddca0a",
        "g": "9cd83b71e925ce2c",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 300,
        "wires": [
            [
                "a3a996ed79502ea4"
            ]
        ]
    },
    {
        "id": "36b1016cafd8a2e8",
        "type": "http request",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "grafana:3000/api/search",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "e87e35682906e1b0"
            ]
        ]
    },
    {
        "id": "cbee99851ad29dbf",
        "type": "inject",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "f006755cc99035f0"
            ]
        ]
    },
    {
        "id": "e87e35682906e1b0",
        "type": "function",
        "z": "cc4603ebcf2608d1",
        "name": "function 1",
        "func": "const dashboards = msg.payload\n\nfor (let i = 0; i < dashboards.length; i++){\n    const url = `grafana:3000/api/dashboards/uid/${dashboards[i].uid}`\n    msg.url = url\n    // if( i + 1 === dashboards.length) msg.complete = true\n    node.send(msg)\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 280,
        "wires": [
            [
                "f66519839886e3e9"
            ]
        ]
    },
    {
        "id": "f66519839886e3e9",
        "type": "http request",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 420,
        "wires": [
            [
                "faf15f6e5517884d"
            ]
        ]
    },
    {
        "id": "3024cddabcdbe2d5",
        "type": "function",
        "z": "cc4603ebcf2608d1",
        "name": "function 2",
        "func": "const response = msg.payload\nconst orgId = 1\nconst iframeUrls = []\n\nfor (const data of response) {\n    const { dashboard } = data\n    let id = 1\n    for (const panel of dashboard.panels) {\n        const iframeUrl = `http://localhost:3000/d-solo/${dashboard.uid}/${dashboard.title}?orgId=${orgId}&panelId=${id}`;\n        iframeUrls.push(iframeUrl)\n        id++\n    }\n}\n\nmsg.payload = iframeUrls\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 400,
        "wires": [
            [
                "b0abb5dbede444be"
            ]
        ]
    },
    {
        "id": "b0abb5dbede444be",
        "type": "function",
        "z": "cc4603ebcf2608d1",
        "name": "function 3",
        "func": "function createIframe(url){\n    return `<iframe style='flex: 1 0 31%' height=\"400\" frameborder=\"0\" src=\"${url}\"></iframe>`\n}\n\nlet urls = msg.payload\nmsg.template = urls.reduce((prev, curr) => prev + createIframe(curr), '<div style=\"display:flex; flex-direction:row; flex-wrap:wrap; gap:2px 3px; justify-content: space-between\">')\nmsg.template = msg.template + \"</div>\"\nmsg.payload = true\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 460,
        "wires": [
            [
                "f50ff9422519fd74"
            ]
        ]
    },
    {
        "id": "552ce715e08a117a",
        "type": "ui_template",
        "z": "cc4603ebcf2608d1",
        "group": "ca7de9296fb2277a",
        "name": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "faf15f6e5517884d",
        "type": "join",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "3",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 590,
        "y": 400,
        "wires": [
            [
                "3024cddabcdbe2d5"
            ]
        ]
    },
    {
        "id": "f50ff9422519fd74",
        "type": "template",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "",
        "output": "str",
        "x": 1140,
        "y": 460,
        "wires": [
            [
                "552ce715e08a117a",
                "1016f46ae59bb4ab"
            ]
        ]
    },
    {
        "id": "f006755cc99035f0",
        "type": "ui_button",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "group": "ca7de9296fb2277a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "grafana:3000/api/search",
        "payloadType": "str",
        "topic": "url",
        "topicType": "msg",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "36b1016cafd8a2e8",
                "344de3f1824f71be"
            ]
        ]
    },
    {
        "id": "344de3f1824f71be",
        "type": "change",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1016f46ae59bb4ab",
        "type": "debug",
        "z": "cc4603ebcf2608d1",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "template",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 340,
        "wires": []
    },
    {
        "id": "b5678455cca2a097",
        "type": "link in",
        "z": "755838468578bf48",
        "name": "Global Var Initialized",
        "links": [
            "c623a22e0f8f2072"
        ],
        "x": 205,
        "y": 440,
        "wires": [
            [
                "8324937fa4c6ae66",
                "aa892cc5faf41bc3"
            ]
        ]
    },
    {
        "id": "9b279c26c577b1c5",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Initialize sensors",
        "func": "const SENSOR_TYPES = global.get('sensorTypes')\nconst MEASURE_UNITS = global.get('measureUnits')\n\nclass Sensor {\n  constructor ({ type, room, id, value, measureUnit, randomProbability }) {\n    if (this.constructor === Sensor) {\n      throw new Error('Abstract class \"Sensor\" cannot be instantiated directly.')\n    }\n    this.type = type\n    this.room = room\n    this.id = id\n    this.value = value\n    this.measureUnit = measureUnit\n    this.randomProbability = randomProbability\n  }\n\n  getData () {\n    return {\n      type: this.type,\n      room: this.room,\n      id: this.id,\n      value: this.value,\n      measureUnit: this.measureUnit\n    }\n  }\n\n  generateData(){\n    throw new Error(\"Method not supported\")\n  }\n\n  updateValue ({ value }) {\n    throw new Error(\"Method not supported\")\n  }\n}\n\nclass LightSensor extends Sensor {\n  constructor ({ room, id, value = null, randomProbability = 50 }) {\n    const type = SENSOR_TYPES.LIGHT\n    const measureUnit = MEASURE_UNITS[type]\n    super({ type: SENSOR_TYPES.LIGHT, room, id, value, measureUnit, randomProbability })\n  }\n\n  updateValue({ value }) {\n    if (value === null || value === undefined) return\n    this.value = value\n  }\n\n  generateData(){\n    const by = 2\n    const probability = Math.random() * 100\n    if(probability > this.randomProbability) {\n      const shouldIncrease = (Math.random() * 100) >= 50\n      if(!shouldIncrease && this.value === 0) return 0\n      return shouldIncrease ? this.value + by : this.value - by\n    }\n    return this.value\n  }\n}\n\nclass MotionSensor extends Sensor {\n  constructor({ room, id, value = null, randomProbability = 40 }) {\n    const type = SENSOR_TYPES.LIGHT\n    const measureUnit = MEASURE_UNITS[type]\n    super({ type: SENSOR_TYPES.MOTION, room, id, value, measureUnit, randomProbability })\n  }\n\n  updateValue({ value }) {\n    if (value === null || value === undefined) return\n    this.value = value\n  }\n\n  generateData(){\n    const probability = Math.random() * 100\n    if(probability > this.randomProbability) {\n      return !this.value\n    }\n    return this.value\n  }\n}\n\nclass SensorFactory {\n  sensors = {\n    [SENSOR_TYPES.LIGHT]: LightSensor,\n    [SENSOR_TYPES.MOTION]: MotionSensor\n  }\n\n  create({type, room, id}) {\n    if (!this.sensors[type]) {\n      throw new Error(`Sensor type ${type} is not supported.`)\n    }\n    return new this.sensors[type]({ room, id })\n  }\n}\n\nconst sensorFactory = new SensorFactory()\n\nconst roomKey = global.get('roomKey')\nconst rooms = global.get(roomKey)\nconst activateTopic = global.get('activateSensorTopic')\n\nfor(const room of rooms) {\n    const {roomName, sensors} = room\n    let id = 0\n    for(const sensor of sensors){\n      const sens = sensorFactory.create({ type: sensor.type, room: roomName, id })\n      const key = `${roomName}/${sensor.type}/${sens.id}`\n      global.set(key, sens);\n      // Publish initialized data to the topic\n      // sensors/activate/<room>/<type>/<id>\n      msg.topic = `${activateTopic}/${roomName}/${sensor.type}/${id}`;\n      msg.payload = { sensor: sens, roomName};\n      id++\n      node.send(msg);\n    }\n}\nreturn",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "3003505d4d4b64f1",
                "485036f211773d50",
                "05d6ff2edfc3f55f"
            ]
        ]
    },
    {
        "id": "485036f211773d50",
        "type": "mqtt out",
        "z": "755838468578bf48",
        "name": "Activate Sensor",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e08a334d8688ae84",
        "x": 860,
        "y": 460,
        "wires": []
    },
    {
        "id": "3003505d4d4b64f1",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Generate Data Loop",
        "func": "const {sensor, roomName} = msg.payload\nconst dataSensorTopic = global.get(\"dataSensorTopic\")\nconst sensorKey = `${roomName}/${sensor.type}/${sensor.id}`\n// sensors/data/<room>/<type>/<id>\nconst topic = `${dataSensorTopic}/${sensorKey}`\nconst messageRate = 5000\nfunction sendData() {\n    const sensor = global.get(sensorKey)\n    const value = sensor.generateData()\n    sensor.updateValue( { value } )\n    const message = {topic, payload: sensor.getData()}\n    global.set(sensorKey, sensor)\n    node.send(message)\n}\n\nsetInterval(sendData, messageRate)\n// actuators/living-room/lightbulb/increase\nreturn",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 540,
        "wires": [
            [
                "7607e467ec6d66d9",
                "4940e7eadbc7c5e8"
            ]
        ]
    },
    {
        "id": "7607e467ec6d66d9",
        "type": "mqtt out",
        "z": "755838468578bf48",
        "name": "Send Sensor Data",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e08a334d8688ae84",
        "x": 1310,
        "y": 540,
        "wires": []
    },
    {
        "id": "05d6ff2edfc3f55f",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "Sensor initialized",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 600,
        "wires": []
    },
    {
        "id": "e8d394f860e18f1e",
        "type": "mqtt in",
        "z": "755838468578bf48",
        "name": "On Activate Sensor",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 690,
        "y": 260,
        "wires": [
            [
                "51c164ae9e832dc8"
            ]
        ]
    },
    {
        "id": "8324937fa4c6ae66",
        "type": "change",
        "z": "755838468578bf48",
        "name": "Set Activate Sensor Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext('activateSensorTopic') & \"/#\"\t",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "subscribe",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 260,
        "wires": [
            [
                "e8d394f860e18f1e"
            ]
        ]
    },
    {
        "id": "04733e6f9637ba22",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Handle Activate Sensor",
        "func": "const activateSensorTopic = global.get('activateSensorTopic')\nconst {sensorKeys} = msg.payload\nconst { topic, payload } = msg\n\n// sensor/activate/<room>/<type>/<id>\nconst sliceBy = activateSensorTopic.split(\"/\").length\nconst [room, sensorType, id] = topic.split(\"/\").slice(sliceBy)\nconst key = `${room}/${sensorType}/${id}`\nlet keys = global.get(sensorKeys) || []\nif(keys.includes(key)) return\nkeys.push(key)\n// Store the updated array back in the flow\nglobal.set(sensorKeys, keys)\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b851afacfddc5b9e",
        "type": "mqtt in",
        "z": "755838468578bf48",
        "name": "",
        "topic": "${ACTUATORS_TOPIC}",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 710,
        "y": 200,
        "wires": [
            [
                "51c164ae9e832dc8",
                "93e829cfaebfaae0"
            ]
        ]
    },
    {
        "id": "aa892cc5faf41bc3",
        "type": "delay",
        "z": "755838468578bf48",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 540,
        "wires": [
            [
                "9b279c26c577b1c5"
            ]
        ]
    },
    {
        "id": "242e532bcfb1021e",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Handle Actuator Message",
        "func": "const { topic, payload } = msg\nconst { sensorKeys } = msg.payload\nconst SENSOR_TYPES = global.get('sensorTypes')\n\nconst ACTUATORS_TYPES = {\n    LIGHTBULB: 'lightbulb'\n}\n\nconst ACTUATOR_MAP = {\n    [ACTUATORS_TYPES.LIGHTBULB]: SENSOR_TYPES.LIGHT,\n}\n\n// actuators/<room>/<type>/action\nconst actuatorsTopic = global.get('actuatorsTopic').replace(\"/#\", \"\").split(\"/\")\nconst [actuatorRoom, actuatorType, ] = topic.split(\"/\").slice(actuatorsTopic.length)\nconst keys = global.get(sensorKeys) || []\n// Find all keys that match the room and sensor type\nconst matchingKeys = keys.filter(k => {\n    // <room>/<type>/<id>\n    const [room, sensorType, ] = k.split(\"/\")\n    return room === actuatorRoom && ACTUATOR_MAP[actuatorType] === sensorType\n})\n\nif (matchingKeys.length === 0) {\n    node.warn(`Sensors for actuator ${actuatorType} in room ${actuatorRoom} not found`)\n    return\n}\nconst dataSensorTopic = global.get('dataSensorTopic')\nfor(const key of matchingKeys){\n    const sensor = global.get(key)\n    const [room, type, id] = key.split(\"/\")\n    if (!sensor) {\n        node.warn(`Sensor ${type} in ${room} not found`)\n        continue\n    }\n    const topic = `${dataSensorTopic}/${key}`\n    sensor.updateValue(payload)\n    const message = { topic, payload: sensor.getData() }\n    sensor.updateValue(payload)\n    global.set(key, sensor)\n    // node.warn(message)\n    node.send(message)\n}\n\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 280,
        "wires": [
            [
                "cece027a2f052c5c",
                "7607e467ec6d66d9"
            ]
        ]
    },
    {
        "id": "51c164ae9e832dc8",
        "type": "change",
        "z": "755838468578bf48",
        "name": "Set Sensor Key",
        "rules": [
            {
                "t": "set",
                "p": "payload.sensorKeys",
                "pt": "msg",
                "to": "sensorKeys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "7f1daae40058183d"
            ]
        ]
    },
    {
        "id": "7f1daae40058183d",
        "type": "switch",
        "z": "755838468578bf48",
        "name": "Check Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "activateSensorTopic",
                "vt": "global"
            },
            {
                "t": "cont",
                "v": "$replace($globalContext('actuatorsTopic'), '/#', '', 1)\t\t",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "04733e6f9637ba22"
            ],
            [
                "242e532bcfb1021e"
            ]
        ]
    },
    {
        "id": "cece027a2f052c5c",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "Sensors responds to actuators",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 280,
        "wires": []
    },
    {
        "id": "4940e7eadbc7c5e8",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 600,
        "wires": []
    },
    {
        "id": "93e829cfaebfaae0",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 140,
        "wires": []
    }
]