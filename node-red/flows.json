[
    {
        "id": "916b9dbcf5ad3e00",
        "type": "tab",
        "label": "Initialize variables",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0b59576ee72e06d9",
        "type": "tab",
        "label": "Write to influxdb",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6127eaeadf941c69",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cc4603ebcf2608d1",
        "type": "tab",
        "label": "Rooms",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "755838468578bf48",
        "type": "tab",
        "label": "Init sensors",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e08a334d8688ae84",
        "type": "mqtt-broker",
        "name": "",
        "broker": "${MQTT_BROKER}",
        "port": "${MQTT_BROKER_PORT}",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0e8f129c76ace03a",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "iot",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influx:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "c1dbac1a29cb8513",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "af0b1d9cea7d5bd4",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3f8c48cfaa40525a",
        "type": "ui_group",
        "name": "Settings",
        "tab": "c1dbac1a29cb8513",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ff724d16a36f0fe7",
        "type": "ui_tab",
        "name": "Rooms",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ca7de9296fb2277a",
        "type": "ui_group",
        "name": "Graphics",
        "tab": "ff724d16a36f0fe7",
        "order": 2,
        "disp": false,
        "width": "34",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fc03d7aeb9681b90",
        "type": "inject",
        "z": "916b9dbcf5ad3e00",
        "name": "Initialize Global Variable",
        "props": [
            {
                "p": "payload.roomKey",
                "v": "rooms",
                "vt": "str"
            },
            {
                "p": "payload.activateSensorTopic",
                "v": "sensors/activate",
                "vt": "str"
            },
            {
                "p": "payload.dataSensorTopic",
                "v": "sensors/data",
                "vt": "str"
            },
            {
                "p": "payload.actuatorsConsumptionTopic",
                "v": "actuators/consumption/#",
                "vt": "str"
            },
            {
                "p": "payload.broker",
                "v": "{\"broker\":\"localhost\",\"port\":1883,\"force\":true}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "ab94d42d03980f77"
            ]
        ]
    },
    {
        "id": "ab94d42d03980f77",
        "type": "change",
        "z": "916b9dbcf5ad3e00",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dataSensorTopic",
                "pt": "global",
                "to": "payload.dataSensorTopic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "actuatorsConsumptionTopic",
                "pt": "global",
                "to": "payload.actuatorsConsumptionTopic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "activateSensorTopic",
                "pt": "global",
                "to": "payload.activateSensorTopic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "427a379faa538488",
        "type": "inject",
        "z": "0b59576ee72e06d9",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "subscribe",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "$globalContext('dataSensorTopic') & \"/#\"\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 200,
        "wires": [
            [
                "faafa4fe85213fb1"
            ]
        ]
    },
    {
        "id": "fdcdddfab6cf8126",
        "type": "debug",
        "z": "0b59576ee72e06d9",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 140,
        "wires": []
    },
    {
        "id": "231de59f33547edf",
        "type": "function",
        "z": "0b59576ee72e06d9",
        "name": "Handle Sensor Data",
        "func": "function generateInfluxdbData({ type, room, id, value, measureUnit }) {\n    const payload = [\n        {\n            value: value,\n            measureUnit: measureUnit\n        },\n        {\n            room: room,\n            id: id,\n            type: type\n        },\n    ]\n    const measurement = type\n    return { payload, measurement }\n}\n\nconst { type, room, id, value, measureUnit } = msg.payload\nif (!type && !room && !id && !measureUnit) return\nif (value === undefined || value === null) return\nconst dataToWrite = generateInfluxdbData(msg.payload)\nmsg.payload = dataToWrite.payload\nmsg.measurement = dataToWrite.measurement\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 200,
        "wires": [
            [
                "fdcdddfab6cf8126",
                "14e34184220c393f"
            ]
        ]
    },
    {
        "id": "faafa4fe85213fb1",
        "type": "mqtt in",
        "z": "0b59576ee72e06d9",
        "name": "Sensor Data Topic",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 450,
        "y": 200,
        "wires": [
            [
                "75a22c9c959a2199",
                "231de59f33547edf"
            ]
        ]
    },
    {
        "id": "14e34184220c393f",
        "type": "influxdb out",
        "z": "0b59576ee72e06d9",
        "influxdb": "0e8f129c76ace03a",
        "name": "Write sensor data ",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "${DOCKER_INFLUXDB_INIT_ORG}",
        "bucket": "${DOCKER_INFLUXDB_INIT_BUCKET}",
        "x": 890,
        "y": 260,
        "wires": []
    },
    {
        "id": "75a22c9c959a2199",
        "type": "debug",
        "z": "0b59576ee72e06d9",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 320,
        "wires": []
    },
    {
        "id": "2291cab0656c8122",
        "type": "inject",
        "z": "0b59576ee72e06d9",
        "name": "",
        "props": [
            {
                "p": "action",
                "v": "subscribe",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "actuatorsConsumptionTopic",
                "vt": "global"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "18ad96839c9c1188"
            ]
        ]
    },
    {
        "id": "18ad96839c9c1188",
        "type": "mqtt in",
        "z": "0b59576ee72e06d9",
        "name": "Actuator Data Topic",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 470,
        "y": 460,
        "wires": [
            [
                "b4bad796aec4dfa2"
            ]
        ]
    },
    {
        "id": "8aff8835891ee4bf",
        "type": "debug",
        "z": "0b59576ee72e06d9",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 400,
        "wires": []
    },
    {
        "id": "b4bad796aec4dfa2",
        "type": "function",
        "z": "0b59576ee72e06d9",
        "name": "Handle Actuator Data",
        "func": "const measurement = 'actuators'\nfunction generateInfluxdbData({ room, actuator, id, totalConsumption, consumptionPerSecond, currentLux }) {\n    const payload = [\n        {\n            totalConsumption,\n            consumptionPerSecond,\n            currentLux\n        },\n        {\n            room,\n            type: actuator,\n            id\n        }\n    ]\n    return payload\n}\n\nconst sliceBy = global.get('actuatorsConsumptionTopic').replace('/#','').split(\"/\").length\nconst [room, actuator, id] = msg.topic.split('/').slice(sliceBy)\n\nconst payload = generateInfluxdbData({actuator, room, id, ...msg.payload})\nmsg.payload = payload\nmsg.measurement = measurement\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "8aff8835891ee4bf",
                "a45715321ede61b7"
            ]
        ]
    },
    {
        "id": "a45715321ede61b7",
        "type": "influxdb out",
        "z": "0b59576ee72e06d9",
        "influxdb": "0e8f129c76ace03a",
        "name": "Write actuator consumption",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "${DOCKER_INFLUXDB_INIT_ORG}",
        "bucket": "${DOCKER_INFLUXDB_INIT_BUCKET}",
        "x": 980,
        "y": 460,
        "wires": []
    },
    {
        "id": "28e2b663fc3c5bbf",
        "type": "ui_switch",
        "z": "6127eaeadf941c69",
        "name": "",
        "label": "Light Switcher",
        "tooltip": "",
        "group": "3f8c48cfaa40525a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "payload",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 920,
        "y": 360,
        "wires": [
            [
                "cb534bf069e7f480"
            ]
        ]
    },
    {
        "id": "bf9355ac51c606ed",
        "type": "ui_slider",
        "z": "6127eaeadf941c69",
        "name": "",
        "label": "Maximum Light Intensity Threshold",
        "tooltip": "",
        "group": "3f8c48cfaa40525a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "5000",
        "step": "10",
        "className": "",
        "x": 980,
        "y": 280,
        "wires": [
            [
                "8c20390b217a6dc3"
            ]
        ]
    },
    {
        "id": "dabd166faa4759df",
        "type": "debug",
        "z": "6127eaeadf941c69",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 440,
        "wires": []
    },
    {
        "id": "a47911ec1ade51f0",
        "type": "http request",
        "z": "6127eaeadf941c69",
        "name": "Get User Preferences",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 340,
        "y": 260,
        "wires": [
            [
                "97ceffb804840cf8",
                "f7ba98d7d6b23b86",
                "999e0f69afe750ee",
                "dabd166faa4759df"
            ]
        ]
    },
    {
        "id": "20876a078e0d7fc3",
        "type": "inject",
        "z": "6127eaeadf941c69",
        "name": "",
        "props": [
            {
                "p": "url",
                "v": "$env(\"SERVER_URL\") & \":\" & $env(\"SERVER_PORT\") & \"/user-preferences\"\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "a47911ec1ade51f0",
                "0de9b4c1b7f85f51"
            ]
        ]
    },
    {
        "id": "97ceffb804840cf8",
        "type": "change",
        "z": "6127eaeadf941c69",
        "name": "Set Minimum Threshold",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.minimumLightIntensityThreshold",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 200,
        "wires": [
            [
                "f2c5a240a0bb913f"
            ]
        ]
    },
    {
        "id": "f7ba98d7d6b23b86",
        "type": "change",
        "z": "6127eaeadf941c69",
        "name": "Set Maximum Threshold",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.maximumLightIntensityThreshold",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 280,
        "wires": [
            [
                "bf9355ac51c606ed"
            ]
        ]
    },
    {
        "id": "999e0f69afe750ee",
        "type": "change",
        "z": "6127eaeadf941c69",
        "name": "Set Switcher",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "28e2b663fc3c5bbf"
            ]
        ]
    },
    {
        "id": "5430de25f0058e2d",
        "type": "function",
        "z": "6127eaeadf941c69",
        "name": "Set payload",
        "func": "const hasInit = flow.get('hasInit')\nif(!hasInit) {\n    flow.set('hasInit', true)\n    return\n}\nconst SERVER_URL = env.get('SERVER_URL')\nconst SERVER_PORT = env.get('SERVER_PORT')\nconst url = `${SERVER_PORT}:${SERVER_URL}/user-preferences`\nmsg.url = url\nmsg.payload = flow.get('userSettings')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 280,
        "wires": [
            [
                "ce2e358614f0bb51",
                "667f4aad66d2a33d"
            ]
        ]
    },
    {
        "id": "ce2e358614f0bb51",
        "type": "debug",
        "z": "6127eaeadf941c69",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 340,
        "wires": []
    },
    {
        "id": "3a32e5e1fb1ec791",
        "type": "change",
        "z": "6127eaeadf941c69",
        "name": "Set min",
        "rules": [
            {
                "t": "set",
                "p": "userSettings.minimumLightIntensityThreshold",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 200,
        "wires": [
            [
                "5430de25f0058e2d"
            ]
        ]
    },
    {
        "id": "8c20390b217a6dc3",
        "type": "change",
        "z": "6127eaeadf941c69",
        "name": "Set max",
        "rules": [
            {
                "t": "set",
                "p": "userSettings.maximumLightIntensityThreshold",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 280,
        "wires": [
            [
                "5430de25f0058e2d"
            ]
        ]
    },
    {
        "id": "cb534bf069e7f480",
        "type": "change",
        "z": "6127eaeadf941c69",
        "name": "Set lights",
        "rules": [
            {
                "t": "set",
                "p": "userSettings.lightsEnabled",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 360,
        "wires": [
            [
                "5430de25f0058e2d"
            ]
        ]
    },
    {
        "id": "0de9b4c1b7f85f51",
        "type": "change",
        "z": "6127eaeadf941c69",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "hasInit",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "667f4aad66d2a33d",
        "type": "http request",
        "z": "6127eaeadf941c69",
        "name": "Update User Preferences",
        "method": "PUT",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1730,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "f2c5a240a0bb913f",
        "type": "ui_slider",
        "z": "6127eaeadf941c69",
        "name": "",
        "label": "Minimum Light Intensity Threshold",
        "tooltip": "",
        "group": "3f8c48cfaa40525a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "payload",
        "topicType": "msg",
        "min": 0,
        "max": "2000",
        "step": "10",
        "className": "",
        "x": 980,
        "y": 200,
        "wires": [
            [
                "3a32e5e1fb1ec791"
            ]
        ]
    },
    {
        "id": "36b1016cafd8a2e8",
        "type": "http request",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "grafana:3000/api/search",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "e87e35682906e1b0"
            ]
        ]
    },
    {
        "id": "cbee99851ad29dbf",
        "type": "inject",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "f006755cc99035f0"
            ]
        ]
    },
    {
        "id": "e87e35682906e1b0",
        "type": "function",
        "z": "cc4603ebcf2608d1",
        "name": "function 1",
        "func": "const dashboards = msg.payload\n\nfor (let i = 0; i < dashboards.length; i++){\n    const url = `grafana:3000/api/dashboards/uid/${dashboards[i].uid}`\n    msg.url = url\n    // if( i + 1 === dashboards.length) msg.complete = true\n    node.send(msg)\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 280,
        "wires": [
            [
                "f66519839886e3e9"
            ]
        ]
    },
    {
        "id": "f66519839886e3e9",
        "type": "http request",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 420,
        "wires": [
            [
                "faf15f6e5517884d"
            ]
        ]
    },
    {
        "id": "3024cddabcdbe2d5",
        "type": "function",
        "z": "cc4603ebcf2608d1",
        "name": "function 2",
        "func": "const response = msg.payload\nconst orgId = 1\nconst iframeUrls = []\n\nfor (const data of response) {\n    const { dashboard } = data\n    let id = 1\n    for (const panel of dashboard.panels) {\n        const iframeUrl = `http://localhost:3000/d-solo/${dashboard.uid}/${dashboard.title}?orgId=${orgId}&panelId=${id}`;\n        iframeUrls.push(iframeUrl)\n        id++\n    }\n}\n\nmsg.payload = iframeUrls\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 400,
        "wires": [
            [
                "b0abb5dbede444be"
            ]
        ]
    },
    {
        "id": "b0abb5dbede444be",
        "type": "function",
        "z": "cc4603ebcf2608d1",
        "name": "function 3",
        "func": "function createIframe(url){\n    return `<iframe style='flex: 1 0 31%' height=\"400\" frameborder=\"0\" src=\"${url}\"></iframe>`\n}\n\nlet urls = msg.payload\nmsg.template = urls.reduce((prev, curr) => prev + createIframe(curr), '<div style=\"display:flex; flex-direction:row; flex-wrap:wrap; gap:2px 3px; justify-content: space-between\">')\nmsg.template = msg.template + \"</div>\"\nmsg.payload = true\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 460,
        "wires": [
            [
                "f50ff9422519fd74"
            ]
        ]
    },
    {
        "id": "552ce715e08a117a",
        "type": "ui_template",
        "z": "cc4603ebcf2608d1",
        "group": "ca7de9296fb2277a",
        "name": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "faf15f6e5517884d",
        "type": "join",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "3",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 590,
        "y": 400,
        "wires": [
            [
                "3024cddabcdbe2d5"
            ]
        ]
    },
    {
        "id": "f50ff9422519fd74",
        "type": "template",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "",
        "output": "str",
        "x": 1140,
        "y": 460,
        "wires": [
            [
                "552ce715e08a117a",
                "1016f46ae59bb4ab"
            ]
        ]
    },
    {
        "id": "f006755cc99035f0",
        "type": "ui_button",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "group": "ca7de9296fb2277a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "grafana:3000/api/search",
        "payloadType": "str",
        "topic": "url",
        "topicType": "msg",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "36b1016cafd8a2e8",
                "344de3f1824f71be"
            ]
        ]
    },
    {
        "id": "344de3f1824f71be",
        "type": "change",
        "z": "cc4603ebcf2608d1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1016f46ae59bb4ab",
        "type": "debug",
        "z": "cc4603ebcf2608d1",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "template",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 340,
        "wires": []
    },
    {
        "id": "b5678455cca2a097",
        "type": "link in",
        "z": "755838468578bf48",
        "name": "Global Var Initialized",
        "links": [
            "c623a22e0f8f2072"
        ],
        "x": 205,
        "y": 440,
        "wires": [
            [
                "8324937fa4c6ae66",
                "aa892cc5faf41bc3"
            ]
        ]
    },
    {
        "id": "9b279c26c577b1c5",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Initialize sensors",
        "func": "const SENSOR_TYPES = global.get('sensorTypes')\nconst MEASURE_UNITS = global.get('measureUnits')\n\nclass Sensor {\n  constructor ({ type, room, id, value, measureUnit, randomProbability }) {\n    if (this.constructor === Sensor) {\n      throw new Error('Abstract class \"Sensor\" cannot be instantiated directly.')\n    }\n    this.type = type\n    this.room = room\n    this.id = id\n    this.value = value\n    this.measureUnit = measureUnit\n    this.randomProbability = randomProbability\n  }\n\n  getData () {\n    return {\n      type: this.type,\n      room: this.room,\n      id: this.id,\n      value: this.value,\n      measureUnit: this.measureUnit\n    }\n  }\n\n  generateData(){\n    throw new Error(\"Method not supported\")\n  }\n\n  updateValue ({ value }) {\n    throw new Error(\"Method not supported\")\n  }\n}\n\nclass LightSensor extends Sensor {\n  constructor ({ room, id, value = null, randomProbability = 50 }) {\n    const type = SENSOR_TYPES.LIGHT\n    const measureUnit = MEASURE_UNITS[type]\n    super({ type: SENSOR_TYPES.LIGHT, room, id, value, measureUnit, randomProbability })\n  }\n\n  updateValue({ value }) {\n    if (value === null || value === undefined) return\n    this.value = value\n  }\n\n  generateData(){\n    const by = 2\n    const probability = Math.random() * 100\n    if(probability > this.randomProbability) {\n      const shouldIncrease = (Math.random() * 100) >= 50\n      if(!shouldIncrease && this.value === 0) return 0\n      return shouldIncrease ? this.value + by : this.value - by\n    }\n    return this.value\n  }\n}\n\nclass MotionSensor extends Sensor {\n  constructor({ room, id, value = null, randomProbability = 40 }) {\n    const type = SENSOR_TYPES.LIGHT\n    const measureUnit = MEASURE_UNITS[type]\n    super({ type: SENSOR_TYPES.MOTION, room, id, value, measureUnit, randomProbability })\n  }\n\n  updateValue({ value }) {\n    if (value === null || value === undefined) return\n    this.value = value\n  }\n\n  generateData(){\n    const probability = Math.random() * 100\n    if(probability > this.randomProbability) {\n      return !this.value\n    }\n    return this.value\n  }\n}\n\nclass SensorFactory {\n  sensors = {\n    [SENSOR_TYPES.LIGHT]: LightSensor,\n    [SENSOR_TYPES.MOTION]: MotionSensor\n  }\n\n  create({type, room, id}) {\n    if (!this.sensors[type]) {\n      throw new Error(`Sensor type ${type} is not supported.`)\n    }\n    return new this.sensors[type]({ room, id })\n  }\n}\n\nconst sensorFactory = new SensorFactory()\n\nconst roomKey = global.get('roomKey')\nconst rooms = global.get(roomKey)\nconst activateTopic = global.get('activateSensorTopic')\n\nfor(const room of rooms) {\n    const {roomName, sensors} = room\n    let id = 0\n    for(const sensor of sensors){\n      const sens = sensorFactory.create({ type: sensor.type, room: roomName, id })\n      const key = `${roomName}/${sensor.type}/${sens.id}`\n      global.set(key, sens);\n      // Publish initialized data to the topic\n      // sensors/activate/<room>/<type>/<id>\n      msg.topic = `${activateTopic}/${roomName}/${sensor.type}/${id}`;\n      msg.payload = { sensor: sens, roomName};\n      id++\n      node.send(msg);\n    }\n}\nreturn",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "3003505d4d4b64f1",
                "485036f211773d50",
                "05d6ff2edfc3f55f"
            ]
        ]
    },
    {
        "id": "485036f211773d50",
        "type": "mqtt out",
        "z": "755838468578bf48",
        "name": "Activate Sensor",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e08a334d8688ae84",
        "x": 860,
        "y": 460,
        "wires": []
    },
    {
        "id": "3003505d4d4b64f1",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Generate Data Loop",
        "func": "const {sensor, roomName} = msg.payload\nconst dataSensorTopic = global.get(\"dataSensorTopic\")\nconst sensorKey = `${roomName}/${sensor.type}/${sensor.id}`\n// sensors/data/<room>/<type>/<id>\nconst topic = `${dataSensorTopic}/${sensorKey}`\nconst messageRate = 5000\nfunction sendData() {\n    const sensor = global.get(sensorKey)\n    const value = sensor.generateData()\n    sensor.updateValue( { value } )\n    const message = {topic, payload: sensor.getData()}\n    global.set(sensorKey, sensor)\n    node.send(message)\n}\n\nsetInterval(sendData, messageRate)\n// actuators/living-room/lightbulb/increase\nreturn",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 540,
        "wires": [
            [
                "7607e467ec6d66d9",
                "4940e7eadbc7c5e8"
            ]
        ]
    },
    {
        "id": "7607e467ec6d66d9",
        "type": "mqtt out",
        "z": "755838468578bf48",
        "name": "Send Sensor Data",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e08a334d8688ae84",
        "x": 1310,
        "y": 540,
        "wires": []
    },
    {
        "id": "05d6ff2edfc3f55f",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "Sensor initialized",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 600,
        "wires": []
    },
    {
        "id": "e8d394f860e18f1e",
        "type": "mqtt in",
        "z": "755838468578bf48",
        "name": "On Activate Sensor",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 690,
        "y": 260,
        "wires": [
            [
                "51c164ae9e832dc8"
            ]
        ]
    },
    {
        "id": "8324937fa4c6ae66",
        "type": "change",
        "z": "755838468578bf48",
        "name": "Set Activate Sensor Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$globalContext('activateSensorTopic') & \"/#\"\t",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "subscribe",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 260,
        "wires": [
            [
                "e8d394f860e18f1e"
            ]
        ]
    },
    {
        "id": "04733e6f9637ba22",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Handle Activate Sensor",
        "func": "const activateSensorTopic = global.get('activateSensorTopic')\nconst {sensorKeys} = msg.payload\nconst { topic, payload } = msg\n\n// sensor/activate/<room>/<type>/<id>\nconst sliceBy = activateSensorTopic.split(\"/\").length\nconst [room, sensorType, id] = topic.split(\"/\").slice(sliceBy)\nconst key = `${room}/${sensorType}/${id}`\nlet keys = global.get(sensorKeys) || []\nif(keys.includes(key)) return\nkeys.push(key)\n// Store the updated array back in the flow\nglobal.set(sensorKeys, keys)\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b851afacfddc5b9e",
        "type": "mqtt in",
        "z": "755838468578bf48",
        "name": "",
        "topic": "${ACTUATORS_TOPIC}",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e08a334d8688ae84",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 710,
        "y": 200,
        "wires": [
            [
                "51c164ae9e832dc8",
                "93e829cfaebfaae0"
            ]
        ]
    },
    {
        "id": "aa892cc5faf41bc3",
        "type": "delay",
        "z": "755838468578bf48",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 540,
        "wires": [
            [
                "9b279c26c577b1c5"
            ]
        ]
    },
    {
        "id": "242e532bcfb1021e",
        "type": "function",
        "z": "755838468578bf48",
        "name": "Handle Actuator Message",
        "func": "const { topic, payload } = msg\nconst { sensorKeys } = msg.payload\nconst SENSOR_TYPES = global.get('sensorTypes')\n\nconst ACTUATORS_TYPES = {\n    LIGHTBULB: 'lightbulb'\n}\n\nconst ACTUATOR_MAP = {\n    [ACTUATORS_TYPES.LIGHTBULB]: SENSOR_TYPES.LIGHT,\n}\n\n// actuators/<room>/<type>/action\nconst actuatorsTopic = global.get('actuatorsTopic').replace(\"/#\", \"\").split(\"/\")\nconst [actuatorRoom, actuatorType, ] = topic.split(\"/\").slice(actuatorsTopic.length)\nconst keys = global.get(sensorKeys) || []\n// Find all keys that match the room and sensor type\nconst matchingKeys = keys.filter(k => {\n    // <room>/<type>/<id>\n    const [room, sensorType, ] = k.split(\"/\")\n    return room === actuatorRoom && ACTUATOR_MAP[actuatorType] === sensorType\n})\n\nif (matchingKeys.length === 0) {\n    node.warn(`Sensors for actuator ${actuatorType} in room ${actuatorRoom} not found`)\n    return\n}\nconst dataSensorTopic = global.get('dataSensorTopic')\nfor(const key of matchingKeys){\n    const sensor = global.get(key)\n    const [room, type, id] = key.split(\"/\")\n    if (!sensor) {\n        node.warn(`Sensor ${type} in ${room} not found`)\n        continue\n    }\n    const topic = `${dataSensorTopic}/${key}`\n    sensor.updateValue(payload)\n    const message = { topic, payload: sensor.getData() }\n    sensor.updateValue(payload)\n    global.set(key, sensor)\n    // node.warn(message)\n    node.send(message)\n}\n\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 280,
        "wires": [
            [
                "cece027a2f052c5c",
                "7607e467ec6d66d9"
            ]
        ]
    },
    {
        "id": "51c164ae9e832dc8",
        "type": "change",
        "z": "755838468578bf48",
        "name": "Set Sensor Key",
        "rules": [
            {
                "t": "set",
                "p": "payload.sensorKeys",
                "pt": "msg",
                "to": "sensorKeys",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "7f1daae40058183d"
            ]
        ]
    },
    {
        "id": "7f1daae40058183d",
        "type": "switch",
        "z": "755838468578bf48",
        "name": "Check Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "activateSensorTopic",
                "vt": "global"
            },
            {
                "t": "cont",
                "v": "$replace($globalContext('actuatorsTopic'), '/#', '', 1)\t\t",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "04733e6f9637ba22"
            ],
            [
                "242e532bcfb1021e"
            ]
        ]
    },
    {
        "id": "cece027a2f052c5c",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "Sensors responds to actuators",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 280,
        "wires": []
    },
    {
        "id": "4940e7eadbc7c5e8",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 600,
        "wires": []
    },
    {
        "id": "93e829cfaebfaae0",
        "type": "debug",
        "z": "755838468578bf48",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 140,
        "wires": []
    }
]